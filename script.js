import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import { getDatabase, ref, push, onValue, remove, update, set } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-database.js";

const firebaseConfig = {
  apiKey: "AIzaSyBRmKbekcv6OW8oaMsHPlc8WvfIWnyFAI0",
  authDomain: "appgamesrepo.firebaseapp.com",
  databaseURL: "https://appgamesrepo-default-rtdb.firebaseio.com",
  projectId: "appgamesrepo",
  storageBucket: "appgamesrepo.appspot.com",
  messagingSenderId: "220298514248",
  appId: "1:220298514248:web:f3193a6042d3e1a67a6d7d",
  measurementId: "G-0YVBYHKG2D"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);

const contentArea = document.getElementById("content-area");
const navFreeButton = document.getElementById("nav-free");
const navVipButton = document.getElementById("nav-vip");
const navTokenButton = document.getElementById("nav-token");
const navListButton = document.getElementById("nav-list");

let editKey = null;
let currentApps = [];
let currentRepoType = 'apps'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º FREE

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ---

function showSection(sectionId) {
  contentArea.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  let sectionContent = '';

  switch (sectionId) {
    case 'free':
    case 'vip':
      currentRepoType = (sectionId === 'free') ? 'apps' : 'vipApps';
      sectionContent = `
        <div class="panel-section">
          <h2>–î–æ–±–∞–≤–∏—Ç—å / –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ${sectionId === 'free' ? 'FREE' : 'VIP'} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h2>
          <form id="appForm">
            <input type="hidden" id="repoType" value="${currentRepoType}" />
            <input type="text" id="name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" required />
            <input type="text" id="bundleID" placeholder="Bundle ID" required />
            <input type="text" id="version" placeholder="–í–µ—Ä—Å–∏—è" required />
            <input type="number" id="size" placeholder="–†–∞–∑–º–µ—Ä (–≤ –±–∞–π—Ç–∞—Ö)" required />
            <input type="text" id="downloadURL" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ IPA" required />
            <input type="text" id="iconURL" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∫–æ–Ω–∫—É" required />
            <textarea id="description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"></textarea>
            <button type="submit">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</button>
          </form>
        </div>

        <div class="panel-section">
          <h2>–°–ø–∏—Å–æ–∫ ${sectionId === 'free' ? 'FREE' : 'VIP'} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π</h2>
          <input type="text" id="appSearchInput" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ Bundle ID..." />
          <div id="appsList"></div>
        </div>
      `;
      break;

    case 'token':
      sectionContent = `
        <div class="panel-section">
          <h2>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è VIP —Ç–æ–∫–µ–Ω–∞</h2>
          <div id="vipTokenGenerator">
            <label for="tokenDuration">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞:</label>
            <select id="tokenDuration">
              <option value="1">1 –º–µ—Å—è—Ü</option>
              <option value="3">3 –º–µ—Å—è—Ü–∞</option>
              <option value="6">6 –º–µ—Å—è—Ü–µ–≤</option>
            </select>
            <button id="generateVipTokenButton">üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å VIP —Ç–æ–∫–µ–Ω</button>
            <div id="tokenOutput"></div>
          </div>
        </div>
      `;
      break;

    case 'list':
      sectionContent = `
        <div class="panel-section">
          <h2>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤</h2>
          <h3>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã</h3>
          <div id="approvedTokensList"></div>
          <h3>üïí –¢–æ–∫–µ–Ω—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h3>
          <div id="pendingTokensList"></div>
        </div>
      `;
      break;
  }

  contentArea.innerHTML = sectionContent;
  initializeSection(sectionId);
}

function initializeSection(sectionId) {
  switch (sectionId) {
    case 'free':
    case 'vip':
      const appForm = document.getElementById("appForm");
      const appsListOutput = document.getElementById("appsList");
      const appSearchInput = document.getElementById("appSearchInput");

      // –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–æ—Ä–º—ã
      appForm.addEventListener("submit", handleAppFormSubmit);

      // –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–∏—Å–∫–∞
      appSearchInput.addEventListener('input', filterAndDisplayApps);

      loadApps(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      break;

    case 'token':
      const generateVipTokenButton = document.getElementById("generateVipTokenButton");
      generateVipTokenButton.addEventListener("click", generateVipToken);
      break;

    case 'list':
      loadAllTokens();
      break;
  }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ (FREE/VIP) ---

function loadApps() {
  const appsPath = `${currentRepoType}/apps`;

  onValue(ref(db, appsPath), (snapshot) => {
    const appsListOutput = document.getElementById("appsList");
    if (!appsListOutput) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    appsListOutput.innerHTML = '';
    currentApps = [];

    if (!snapshot.exists()) {
      appsListOutput.innerHTML = `<p>–ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.</p>`;
      return;
    }

    snapshot.forEach(child => {
      const appData = child.val();
      currentApps.push({ key: child.key, ...appData });
    });

    currentApps.sort((a, b) => new Date(b.appUpdateTime || 0) - new Date(a.appUpdateTime || 0));
    filterAndDisplayApps();
  }, (error) => {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:", error);
    const appsListOutput = document.getElementById("appsList");
    if (appsListOutput) {
      appsListOutput.innerHTML = `<p class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}</p>`;
    }
  });
}

function filterAndDisplayApps() {
  const appsListOutput = document.getElementById("appsList");
  const appSearchInput = document.getElementById("appSearchInput");

  if (!appsListOutput || !appSearchInput) return;

  appsListOutput.innerHTML = `<h2>üì± ${currentRepoType === 'vipApps' ? 'VIP' : '–û–±—ã—á–Ω—ã–µ'} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h2>`;
  appsListOutput.innerHTML += `<p><small>–ü—É—Ç—å: ${currentRepoType}/apps</small></p><hr>`;

  const searchTerm = appSearchInput.value.toLowerCase();
  const filteredApps = currentApps.filter(app =>
    app.name.toLowerCase().includes(searchTerm) ||
    app.bundleID.toLowerCase().includes(searchTerm)
  );

  if (filteredApps.length === 0) {
    appsListOutput.innerHTML += `<p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>`;
    return;
  }

  filteredApps.forEach(app => {
    const appDiv = document.createElement('div');
    appDiv.className = 'appCard';
    appDiv.innerHTML = `
      <img src="${app.iconURL || 'placeholder.png'}" alt="${app.name} icon">
      <div class="app-info">
        <strong>${app.name}</strong> (${app.version})<br>
        <small>${app.bundleID}</small>
      </div>
      <div class="app-actions">
        <button class="editBtn" data-id="${app.key}">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        <button class="deleteBtn" data-repo="${currentRepoType}" data-id="${app.key}">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
      </div>
    `;
    appsListOutput.appendChild(appDiv);

    appDiv.querySelector('.editBtn').addEventListener('click', () => editApp(app.key, app));
    appDiv.querySelector('.deleteBtn').addEventListener('click', async (e) => {
      const repo = e.target.dataset.repo;
      const id = e.target.dataset.id;
      if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "${app.name}"?`)) {
        await remove(ref(db, `${repo}/apps/${id}`));
        loadApps();
      }
    });
  });
}

function editApp(key, app) {
  const form = document.getElementById("appForm");
  if (!form) return;

  form.name.value = app.name;
  form.bundleID.value = app.bundleID;
  form.version.value = app.version;
  form.size.value = app.size;
  form.downloadURL.value = app.downloadURL;
  form.iconURL.value = app.iconURL.endsWith('?raw=true') ? app.iconURL : app.iconURL + '?raw=true';
  form.description.value = app.localizedDescription;
  editKey = key;
  form.scrollIntoView({ behavior: 'smooth' });
}

async function handleAppFormSubmit(e) {
  e.preventDefault();

  const form = e.target;
  const iconUrlValue = form.iconURL.value;
  const finalIconURL = iconUrlValue.includes('github.com') && !iconUrlValue.endsWith('?raw=true')
    ? iconUrlValue + '?raw=true'
    : iconUrlValue;

  const appData = {
    name: form.name.value,
    type: 1,
    bundleID: form.bundleID.value,
    bundleIdentifier: form.bundleID.value,
    version: form.version.value,
    size: parseInt(form.size.value),
    down: form.downloadURL.value,
    downloadURL: form.downloadURL.value,
    developerName: "",
    localizedDescription: form.description.value,
    icon: finalIconURL,
    iconURL: finalIconURL,
    appUpdateTime: new Date().toISOString()
  };

  const path = `${currentRepoType}/apps`;

  try {
    if (editKey) {
      await update(ref(db, `${path}/${editKey}`), appData);
      alert('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
      editKey = null;
    } else {
      await push(ref(db, path), appData);
      alert('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
    }
    form.reset();
    loadApps();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", error);
    alert(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
  }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ ---

async function generateVipToken() {
  const tokenDurationSelect = document.getElementById("tokenDuration");
  const tokenOutput = document.getElementById("tokenOutput");
  if (!tokenDurationSelect || !tokenOutput) return;

  const durationMonths = parseInt(tokenDurationSelect.value);
  const now = new Date();
  const expireDate = new Date(now.setMonth(now.getMonth() + durationMonths));

  const token = Math.random().toString(36).substring(2, 12);

  try {
    await set(ref(db, `vipTokens/${token}`), {
      createdAt: new Date().toISOString(),
      expiresAt: expireDate.toISOString(),
      approved: false,
      used: false
    });

    tokenOutput.innerHTML = `
      <h3>‚úÖ VIP —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω</h3>
      <p><b>üîë –¢–æ–∫–µ–Ω:</b> <code>${token}</code></p>
      <p><b>üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç:</b> ${expireDate.toLocaleString()}</p>
      <p><b>üì• GBox JSON:</b></p>
      <textarea readonly onclick="this.select()" style="width:100%; height:55px; font-size:13px;">
https://api-u3vwde53ja-uc.a.run.app/vipRepo.json?token=${token}
      </textarea>
      <p><small>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è GBox JSON.</small></p>
    `;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VIP —Ç–æ–∫–µ–Ω–∞:", error);
    tokenOutput.innerHTML = `<p class="error-message">–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${error.message}</p>`;
  }
}

function loadAllTokens() {
  const approvedTokensList = document.getElementById("approvedTokensList");
  const pendingTokensList = document.getElementById("pendingTokensList");
  if (!approvedTokensList || !pendingTokensList) return;

  onValue(ref(db, "vipTokens"), (snapshot) => {
    approvedTokensList.innerHTML = "";
    pendingTokensList.innerHTML = "";

    if (!snapshot.exists()) {
      approvedTokensList.innerHTML = "<p>–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.</p>";
      pendingTokensList.innerHTML = "<p>–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.</p>";
      return;
    }

    snapshot.forEach((child) => {
      const token = child.key;
      const data = child.val();

      const createdAt = new Date(data.createdAt);
      const expiresAt = new Date(data.expiresAt);
      const now = new Date();

      const expired = expiresAt < now;
      const approved = data.approved === true;
      const used = data.used === true;

      const timeRemainingMs = expiresAt.getTime() - now.getTime();
      const daysRemaining = Math.ceil(timeRemainingMs / (1000 * 60 * 60 * 24));
      const daysLeftText = daysRemaining > 0 ? `${daysRemaining} –¥–Ω. –æ—Å—Ç–∞–ª–æ—Å—å` : '–ò—Å—Ç—ë–∫';


      const item = document.createElement("div");
      item.className = "appCard";
      item.innerHTML = `
        <div class="app-info">
          <strong>–¢–æ–∫–µ–Ω:</strong> <code>${token}</code><br>
          <small>–°–æ–∑–¥–∞–Ω: ${createdAt.toLocaleDateString()}</small><br>
          <small>–ò—Å—Ç–µ–∫–∞–µ—Ç: ${expiresAt.toLocaleString()}</small><br>
          <small>${daysLeftText}</small>
        </div>
        <div class="app-actions">
          ${!approved && !expired && !used ? '<button class="approveBtn">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>' : ''}
          <button class="deleteBtn">üóë –£–¥–∞–ª–∏—Ç—å</button>
        </div>
      `;

      item.querySelector(".deleteBtn").addEventListener("click", async () => {
        if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω ${token}?`)) {
          await remove(ref(db, `vipTokens/${token}`));
        }
      });

      if (!approved && !expired && !used) {
        item.querySelector(".approveBtn")?.addEventListener("click", async () => {
          await update(ref(db, `vipTokens/${token}`), { approved: true });
          alert("–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ");
        });
        pendingTokensList.appendChild(item);
      } else if (approved) {
        approvedTokensList.appendChild(item);
      }
    });
  });
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---

navFreeButton.addEventListener('click', () => {
  showSection('free');
  setActiveNavButton(navFreeButton);
});

navVipButton.addEventListener('click', () => {
  showSection('vip');
  setActiveNavButton(navVipButton);
});

navTokenButton.addEventListener('click', () => {
  showSection('token');
  setActiveNavButton(navTokenButton);
});

navListButton.addEventListener('click', () => {
  showSection('list');
  setActiveNavButton(navListButton);
});

function setActiveNavButton(button) {
  document.querySelectorAll('.nav-button').forEach(btn => btn.classList.remove('active'));
  button.classList.add('active');
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---

document.addEventListener("DOMContentLoaded", () => {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é FREE –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  showSection('free');
  setActiveNavButton(navFreeButton);
});

// –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏–∑ auth.js)
window.addEventListener('auth-success', () => {
  showSection('free');
  setActiveNavButton(navFreeButton);
});
